// <auto-generated />
using System;
using Gym.Infrastructure.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Gym.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250716045350_initialMigration")]
    partial class initialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Gym.Domain.Entities.CompletedExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("RoutineExerciseId")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingSessionId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("RoutineExerciseId");

                    b.HasIndex("TrainingSessionId");

                    b.ToTable("CompletedExercises");
                });

            modelBuilder.Entity("Gym.Domain.Entities.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("EquipmentType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MuscleGroup")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("Gym.Domain.Entities.Routine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Routines");
                });

            modelBuilder.Entity("Gym.Domain.Entities.RoutineExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("integer");

                    b.Property<string>("Instructions")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RoutineId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("RoutineId");

                    b.ToTable("RoutineExercises");
                });

            modelBuilder.Entity("Gym.Domain.Entities.TrainingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("RoutineId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoutineId");

                    b.ToTable("TrainingSessions");
                });

            modelBuilder.Entity("Gym.Domain.Entities.CompletedExercise", b =>
                {
                    b.HasOne("Gym.Domain.Entities.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gym.Domain.Entities.RoutineExercise", "RoutineExercise")
                        .WithMany()
                        .HasForeignKey("RoutineExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gym.Domain.Entities.TrainingSession", "TrainingSession")
                        .WithMany("CompletedExercises")
                        .HasForeignKey("TrainingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Gym.Domain.ValueObjects.RepetitionCount", "RepetitionsCompleted", b1 =>
                        {
                            b1.Property<int>("CompletedExerciseId")
                                .HasColumnType("integer");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("CompletedExerciseId");

                            b1.ToTable("CompletedExercises");

                            b1.WithOwner()
                                .HasForeignKey("CompletedExerciseId");
                        });

                    b.OwnsOne("Gym.Domain.ValueObjects.SetCount", "SetsCompleted", b1 =>
                        {
                            b1.Property<int>("CompletedExerciseId")
                                .HasColumnType("integer");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("CompletedExerciseId");

                            b1.ToTable("CompletedExercises");

                            b1.WithOwner()
                                .HasForeignKey("CompletedExerciseId");
                        });

                    b.OwnsOne("Gym.Domain.ValueObjects.Weight", "WeightUsed", b1 =>
                        {
                            b1.Property<int>("CompletedExerciseId")
                                .HasColumnType("integer");

                            b1.Property<int>("Unit")
                                .HasColumnType("integer");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("CompletedExerciseId");

                            b1.ToTable("CompletedExercises");

                            b1.WithOwner()
                                .HasForeignKey("CompletedExerciseId");
                        });

                    b.Navigation("Exercise");

                    b.Navigation("RepetitionsCompleted")
                        .IsRequired();

                    b.Navigation("RoutineExercise");

                    b.Navigation("SetsCompleted")
                        .IsRequired();

                    b.Navigation("TrainingSession");

                    b.Navigation("WeightUsed");
                });

            modelBuilder.Entity("Gym.Domain.Entities.RoutineExercise", b =>
                {
                    b.HasOne("Gym.Domain.Entities.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gym.Domain.Entities.Routine", "Routine")
                        .WithMany("RoutineExercises")
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Gym.Domain.ValueObjects.Weight", "RecommendedWeight", b1 =>
                        {
                            b1.Property<int>("RoutineExerciseId")
                                .HasColumnType("integer");

                            b1.Property<int>("Unit")
                                .HasColumnType("integer");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("RoutineExerciseId");

                            b1.ToTable("RoutineExercises");

                            b1.WithOwner()
                                .HasForeignKey("RoutineExerciseId");
                        });

                    b.OwnsOne("Gym.Domain.ValueObjects.RepetitionCount", "Repetitions", b1 =>
                        {
                            b1.Property<int>("RoutineExerciseId")
                                .HasColumnType("integer");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("RoutineExerciseId");

                            b1.ToTable("RoutineExercises");

                            b1.WithOwner()
                                .HasForeignKey("RoutineExerciseId");
                        });

                    b.OwnsOne("Gym.Domain.ValueObjects.SetCount", "Sets", b1 =>
                        {
                            b1.Property<int>("RoutineExerciseId")
                                .HasColumnType("integer");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("RoutineExerciseId");

                            b1.ToTable("RoutineExercises");

                            b1.WithOwner()
                                .HasForeignKey("RoutineExerciseId");
                        });

                    b.OwnsOne("Gym.Domain.ValueObjects.RestTime", "RestBetweenSets", b1 =>
                        {
                            b1.Property<int>("RoutineExerciseId")
                                .HasColumnType("integer");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("RoutineExerciseId");

                            b1.ToTable("RoutineExercises");

                            b1.WithOwner()
                                .HasForeignKey("RoutineExerciseId");
                        });

                    b.Navigation("Exercise");

                    b.Navigation("RecommendedWeight");

                    b.Navigation("Repetitions")
                        .IsRequired();

                    b.Navigation("RestBetweenSets")
                        .IsRequired();

                    b.Navigation("Routine");

                    b.Navigation("Sets")
                        .IsRequired();
                });

            modelBuilder.Entity("Gym.Domain.Entities.TrainingSession", b =>
                {
                    b.HasOne("Gym.Domain.Entities.Routine", "Routine")
                        .WithMany()
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Routine");
                });

            modelBuilder.Entity("Gym.Domain.Entities.Routine", b =>
                {
                    b.Navigation("RoutineExercises");
                });

            modelBuilder.Entity("Gym.Domain.Entities.TrainingSession", b =>
                {
                    b.Navigation("CompletedExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
